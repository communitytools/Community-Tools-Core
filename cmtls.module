<?php
/**
 * @file
 * Code for the cmtls feature.
 */

include_once('cmtls.features.inc');

/**
 * Field API implementations
 */
include_once('cmtls.fields.inc');

/**
 * Context API implementations
 */
include_once('cmtls.contexts.inc');

/** 
 * Implements hook_node_load().
 * 
 * adds a 'cmtls_app_type' to node object if it has one defined
 * adds global variable about current application
 */
function cmtls_node_load($nodes, $types) {
  // TODO: a better way to detect if a node has field 'cmtls_app_type' attached, currently hardcoded
  $node_types = array_keys(cmtls_get_app_content_types());
  foreach ($nodes as $nid => &$node) {
    if($node->type == 'cmtls_app') { // hardcoded node type
       // hardcoded node field for app types
      if(!isset($node->field_cmtls_app_type[LANGUAGE_NONE][0]['cmtls_app_type'])) continue; //
      $node->cmtls_app_type = $node->field_cmtls_app_type[LANGUAGE_NONE][0]['cmtls_app_type'];
      cmtls_add_conf('current_app', $node);
      break;
    }
    elseif(isset($node->field_cmtls_application) && $node->field_cmtls_application && $node->field_cmtls_application[LANGUAGE_NONE][0]['nid'] && in_array($node->type, $node_types)) {
      cmtls_add_conf('current_app', node_load($node->field_cmtls_application[LANGUAGE_NONE][0]['nid']));
      break;
    }
  }
}

/**
 * Implement hook_menu().
 */
function cmtls_menu() {
  $items = array();

  // creates the add contextual task / link
  $items['node/%node/cmtls/add'] = array(
    'title' => t('Add'),
    'title callback' => 'cmtls_add_content_title',
    'title arguments' => array(1),
    'page callback' => 'cmtls_add_content_page',
    'page arguments' => array(1),
    'access callback' => 'cmtls_create_content_access',
    'access arguments' => array(1),
    'description' => t('Add content'),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );
  
  return $items;
}

function cmtls_get_app_content_types($module = NULL) {
  static $types;
  if($types && !$module) {
    return $types;
  }
  
  $types = array();
  
  $apps = module_invoke_all('cmtls_app');
  
  foreach ($apps as $m => $config) {
    if(isset($config['node types'])) $types += $config['node types'];
    if($module == $m) {
      if(isset($config['node types'])) return $config['node types'];
      else return array();
    }
  }
  
  return $types;
}

function cmtls_add_content_title($parent) {
  if($parent->type == 'cmtls_group') {
    return t('Add application');
  }
  elseif($parent->type == 'cmtls_app' && $content_types = cmtls_get_app_content_types($parent->cmtls_app_type)) {
    return t('Add '.implode(',', $content_types));
  }
  elseif($content_types = cmtls_get_app_content_types()) {
    return t('Add '.$content_types[$parent->type]);
  }
  else {
    return NULL;
  }
}

/**
 * Add content contextual link access
 * 
 * @see cmtls_menu()
 */
function cmtls_create_content_access($parent) {
  $access = FALSE;
      
  if($parent->type == 'cmtls_group') {
    $access = node_access('create', 'cmtls_app');
  }
  elseif($parent->type == 'cmtls_app') {
    if($content_types = array_keys(cmtls_get_app_content_types($parent->cmtls_app_type))) {
      $access = node_access('create', array_pop($content_types)); // multiple types yet to resolve
    }
  }
  else {
    $access = node_access('create', $parent->type);
  }
  
  return $access;
}

/**
 * Wrapper function for node form, to set variables for default group and application variables
 * 
 * @see cmtls_menu()
 */
function cmtls_add_content_page($parent) {
  module_load_include('inc', 'node', 'node.pages');
  
  global $user;
  
  $types = node_type_get_types();
  $content_types = cmtls_get_app_content_types();
  
  $node = (object) array(
    'uid' => $user->uid,
    'name' => (isset($user->name) ? $user->name : ''),
    'language' => LANGUAGE_NONE,
  );
  
  // menu link preselect for apps
  if($parent->type == 'cmtls_group') {
    $query = db_select('menu_node', 'menu_node')
      ->fields('menu_node', array('mlid'))
      ->condition('menu_node.nid', $parent->nid, '=')
      ->condition('menu_links.menu_name', 'menu-cmtls', '=');
    $query->join('menu_links', 'menu_links', 'menu_node.mlid = menu_links.mlid');
    $mlid = $query->execute()->fetchField();
    $node->cmtls_menu_preselect = $mlid;
  }
  
  // group preselect for apps
  if($parent->type == 'cmtls_group') {
    $type = $node->type = 'cmtls_app';
    $groups = og_get_group_ids('node', array($parent->nid));
    $node->cmtls_group_preselect = $groups[$parent->nid];
  }
  // group and app preselect for content nodes
  elseif($parent->type == 'cmtls_app') {
    $type = $node->type = array_pop(array_keys(cmtls_get_app_content_types($parent->cmtls_app_type)));  // multiple types yet to resolve
    $node->cmtls_group_preselect = $parent->group_audience[LANGUAGE_NONE][0]['gid'];
    $node->cmtls_parent_preselect = $parent->nid;
  }
  // group and app preselect for content nodes
  elseif(in_array($parent->type, array_keys(cmtls_get_app_content_types()))) {
    $type = $node->type = $parent->type;
    $node->cmtls_group_preselect = $parent->group_audience[LANGUAGE_NONE][0]['gid'];
    $node->cmtls_parent_preselect = $parent->field_cmtls_application[LANGUAGE_NONE][0]['nid'];
  }
  drupal_set_title(t('Create @name', array('@name' => $types[$type]->name)), PASS_THROUGH);
  $output = drupal_get_form($type . '_node_form', $node);

  return $output;
}

/**
 * Implements hook_form_alter().
 */
function cmtls_form_node_form_alter(&$form, &$form_state, $form_id) {
  $app_form_ids = array();
  foreach (cmtls_get_app_content_types() as $app_type => $app) {
    $app_form_ids[] = $app_type . '_node_form';
  }
  
  // preselect app menu link
  if(($form_id == 'cmtls_app_node_form') && !empty($form['#node']->cmtls_menu_preselect)) {
    $form['menu']['link']['parent']['#default_value'] = 'menu-cmtls:' . $form['#node']->cmtls_menu_preselect;
    $form['menu']['enabled']['#default_value'] = 1;
  }
  
  // preselect group audience
  if(($form_id == 'cmtls_app_node_form' || in_array($form_id, $app_form_ids)) && !empty($form['#node']->cmtls_group_preselect)) {
    $form['group_audience'][LANGUAGE_NONE]['#default_value'][$form['#node']->cmtls_group_preselect] = $form['#node']->cmtls_group_preselect;
  }

  // preselect parent application
  if(in_array($form_id, $app_form_ids) && !empty($form['#node']->cmtls_parent_preselect)) {
    $form['field_cmtls_application'][LANGUAGE_NONE]['#default_value'][] = $form['#node']->cmtls_parent_preselect;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 * 
 * removes the main group field from node form
 */
function cmtls_form_cmtls_group_node_form_alter(&$form, &$form_state, $form_id) {
  global $user; 
  // allow only for the root user
  if($user->uid != 1) {
    $form['field_main_group'] = NULL;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 * 
 * inserts the app configuration fields
 * @see cmtls_form_config_save()
 */
function cmtls_form_cmtls_app_node_form_alter(&$form, &$form_state, $form_id) {
  
  global $user;
  
  $current_config = array();
  
  if(!empty($form['#node']->field_cmtls_app_configs[LANGUAGE_NONE][0]['value'])) {
    $current_config = unserialize($form['#node']->field_cmtls_app_configs[LANGUAGE_NONE][0]['value']);
  }
  
  $configs = module_invoke_all('cmtls_app_config', $current_config);
  
  $form['cmtls_app_configs'] = array();
  
  if(!empty($configs)) {
    $form['cmtls_app_configs'] = $configs;
    $form['cmtls_app_configs']['#weight'] = $form['field_cmtls_app_type']['#weight'] + 1;
    $form['#submit'][] = 'cmtls_form_config_save';
  }
  
  if($user->uid != 1) {
    $form['field_cmtls_app_configs']['#type'] = 'hidden';
  }
  
  // TODO: hide application selection on already existing node to improve usability
  //if(isset($form['#node']->nid) && $form['#node']->nid) $form['field_cmtls_app_type']['#type'] = 'hidden';
}

/**
 * App node form submit, saves app instance configuration values
 */
function cmtls_form_config_save($form, &$form_state) {
  if(!empty($form['cmtls_app_configs'])) {
    // save app config
    $app_config = array();
    
    foreach ($form['cmtls_app_configs'] as $module => &$configs) if(strpos($module, '#') !== 0) {
      // for now only single level form values are counted
      foreach ($form['cmtls_app_configs'][$module] as $key => &$config) if(strpos($key, '#') !== 0) {
        $app_config[$module][$key] = $config['#value'];
      }
    }
    
    if(!empty($app_config)) {
      $form['field_cmtls_app_configs'][LANGUAGE_NONE][0]['value']['#value'] = $form_state['values']['field_cmtls_app_configs'][LANGUAGE_NONE][0]['value'] = serialize($app_config);
    }
  }
}

/**
 * Adds global values to Drupal $conf['cmtls']
 */
function cmtls_add_conf($key, &$value) {
  global $conf;
  
  if(!isset($conf['cmtls'])) $conf['cmtls'] = array();
  if(!isset($conf['cmtls'][$key])) $conf['cmtls'][$key] = NULL;
  $conf['cmtls'][$key] = $value;
}

/**
 * returns current app object
 */
function cmtls_get_current_app() {
  global $conf;
  if(isset($conf['cmtls']['current_app'])) return $conf['cmtls']['current_app'];
  else return NULL;
}

/**
 * returns the app custom configuration values
 */
function cmtls_get_app_config($app = NULL) {
  if(!$app) $app = cmtls_get_current_app();
  if(isset($app->field_cmtls_app_configs[LANGUAGE_NONE][0]['value'])) return unserialize($app->field_cmtls_app_configs[LANGUAGE_NONE][0]['value']);
  else return array();
}

/**
 * returns user full name
 * 
 * @todo make this configurable with tokens, perhaps independent module
 */
function cmtls_get_username($account) {
  if(isset($account->field_first_name[LANGUAGE_NONE][0]['safe_value']) && $account->field_first_name[LANGUAGE_NONE][0]['safe_value']) {
    $name = $account->field_first_name[LANGUAGE_NONE][0]['safe_value'];
    if(isset($account->field_last_name[LANGUAGE_NONE][0]['safe_value']) && $account->field_last_name[LANGUAGE_NONE][0]['safe_value']) {
      $name .= ' '.$account->field_last_name[LANGUAGE_NONE][0]['safe_value'];
    }
    
    return $name;
  }
  else {
    return $account->name;
  }
}

/**
 * implements hook_username_alter()
 * changes the username to full users name
 */
function cmtls_username_alter(&$name, &$account) {
  $name = cmtls_get_username($account);
}

/**
 * implements hook_preprocess_username()
 * changes the username to full users name
 */
function cmtls_preprocess_username(&$variables) {
  $variables['name_raw'] = $variables['name'] = cmtls_get_username(user_load($variables['uid']));
}

/**
 * Implements hook_form_FORM_ID_alter().
 * 
 * adds new user registrations to the main CT group
 * @see cmtls_user_register_add_to_main_group
 */
function cmtls_form_user_register_form_alter(&$form, &$form_state, $form_id) {
  $form['#submit'][] = 'cmtls_user_register_add_to_main_group';
}

/**
 * adds new user registrations to the main CT group
 */
function cmtls_user_register_add_to_main_group($form, &$form_state) {
  $query = db_select('field_data_field_main_group', 'field_data_field_main_group')
    ->fields('og', array('gid'))
    ->condition('field_data_field_main_group.field_main_group_value', 1, '=')
    ->range(0, 1);
  $query->join('og', 'og', 'field_data_field_main_group.entity_id = og.etid');
  $group = $query->execute()->fetchAssoc();
  if(count($group)) {
    $values = array(
      'entity' => $form['#user'],
    );
    og_group($group['gid'], $values);
  }
}

/**
 * info array for parent app reference
 */
function cmtls_get_parent_reference_field_info() {
  return array(
    'active' => '1',
    'cardinality' => '-1',
    'deleted' => '0',
    'entity_types' => array(),
    'field_name' => 'field_cmtls_application',
    'foreign keys' => array(
      'nid' => array(
        'columns' => array(
          'nid' => 'nid',
        ),
        'table' => 'node',
      ),
    ),
    'indexes' => array(
      'nid' => array(
        0 => 'nid',
      ),
    ),
    'module' => 'node_reference',
    'settings' => array(
      'referenceable_types' => array(
        'cmtls_app' => 'cmtls_app',
      ),
      'view' => array(
        'args' => array(),
        'display_name' => '',
        'view_name' => '',
      ),
    ),
    'translatable' => '0',
    'type' => 'node_reference',
  );
}

/**
 * instance info array for parent app reference, just add bundle 
 */
function cmtls_get_parent_reference_field_instance() {
  return array(
    'default_value' => NULL,
    'deleted' => '0',
    'description' => '',
    'display' => array(
      'default' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => '5',
      ),
      'teaser' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => '5',
      ),
    ),
    'entity_type' => 'node',
    'field_name' => 'field_cmtls_application',
    'label' => 'Application',
    'required' => 1,
    'settings' => array(
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 1,
      'module' => 'options',
      'settings' => array(),
      'type' => 'options_select',
      'weight' => '7',
    ),
  );
}

/**
 * Create a cmtls parent app reference field in a bundle.
 *
 * @param $bundle
 *   The bundle name.
 */
function cmtls_create_parent_reference_field($bundle) {
  $field = field_info_field('field_cmtls_application');
  if (empty($field)) {
    $field = cmtls_get_parent_reference_field_info();
  }

  $instance = field_info_instance('node', 'field_cmtls_application', $bundle);
  if (empty($instance)) {
    $instance = cmtls_get_parent_reference_field_instance();
    $instance += array(
      'bundle' => $bundle,
    );

    field_create_instance($instance);
  }
}
