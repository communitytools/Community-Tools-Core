<?php

/**
 * App stuff
 */
include_once('cmtls.app.inc');

include_once('cmtls.features.inc');

function cmtls_init() {
  static $once;

  if(!$once && function_exists('og_context')) {
    $once = TRUE;
    // add the image for the header
    $group = og_context();
    if($group) {
      $group = node_load($group->etid);
      if(!(isset($group->field_cmtls_group_avatar[LANGUAGE_NONE][0]['uri']) && $group->field_cmtls_group_avatar[LANGUAGE_NONE][0]['uri'])) {
        $group = cmtls_get_main_group_node();
      }
    }
    else {
      $group = cmtls_get_main_group_node();
    }

    if(isset($group->field_cmtls_group_avatar[LANGUAGE_NONE][0]['uri']) && $group->field_cmtls_group_avatar[LANGUAGE_NONE][0]['uri']) {
      $url = image_style_url('cmtls_header', $group->field_cmtls_group_avatar[LANGUAGE_NONE][0]['uri']);
      $element = array(
        '#type' => 'markup',
        '#markup' => '<style type="text/css" media="all">#section-header { background-image: url('. $url .') !important; }</style>',
      );
      drupal_add_html_head($element, 'cmtls_page_header_image');
    }
  }

  $once = TRUE;
}

function cmtls_enable () {
}

/**
 * Implements hook_node_load().
 *
 * adds a 'cmtls_app_type' to node object if it has one defined
 * adds global variable about current application
 */
function cmtls_node_load($nodes, $types) {
  // TODO: a better way to detect if a node has field 'cmtls_app_type' attached, currently hardcoded
  $node_types = array_keys(cmtls_get_app_content_types());
  foreach ($nodes as $nid => &$node) {
    if($node->type == 'cmtls_app') { // hardcoded node type
       // hardcoded node field for app types
      if(!isset($node->field_cmtls_app_type[LANGUAGE_NONE][0]['cmtls_app_type'])) continue; //
      $node->cmtls_app_type = $node->field_cmtls_app_type[LANGUAGE_NONE][0]['cmtls_app_type'];
      cmtls_add_conf('current_app', $node);
      drupal_add_js(drupal_get_path('module', 'cmtls') . '/js/cmtls.active_app.js');
      drupal_add_js(array(
        'cmtls' => array(
          'current_app' => array(
            'nid' => (int)$node->nid,
          ),
        )), 'setting');
      break;
    }
    elseif(isset($node->field_cmtls_application) && $node->field_cmtls_application && $node->field_cmtls_application[LANGUAGE_NONE][0]['nid'] && in_array($node->type, $node_types)) {
      $app = node_load($node->field_cmtls_application[LANGUAGE_NONE][0]['nid']);
      cmtls_add_conf('current_app', $app);
      break;
    }
  }
}

/**
 * Implement hook_menu().
 */
function cmtls_menu() {
  $items = array();

  // creates the add contextual task / link
  $items['node/%node/cmtls/add'] = array(
    'title' => t('Add'),
    'title callback' => 'cmtls_add_content_title',
    'title arguments' => array(1),
    'page callback' => 'cmtls_add_content_page',
    'page arguments' => array(1),
    'access callback' => 'cmtls_create_content_access',
    'access arguments' => array(1),
    'description' => t('Add content'),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'cmtls.pages.inc',
  );

  // creates autocomplete for locations
  $items['cmtls/location/ac'] = array(
    'title' => t('Location matching'),
    'page callback' => 'cmtls_location_autocomplete',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'cmtls.pages.inc',
  );

  return $items;
}

function cmtls_add_content_title($parent) {
  if($parent->type == 'cmtls_group') {
    return t('Add application');
  }
  elseif($parent->type == 'cmtls_app' && $content_types = cmtls_get_app_content_types($parent->cmtls_app_type)) {
    return t('Add '.implode(',', $content_types));
  }
  elseif($content_types = cmtls_get_app_content_types()) {
    if(isset($content_types[$parent->type])) {
      return t('Add '.$content_types[$parent->type]);
    }
    else {
      return NULL;
    }
  }
  else {
    return NULL;
  }
}

/**
 * Add content contextual link access
 */
function cmtls_create_content_access($parent) {
  $access = FALSE;

  if($parent->type == 'cmtls_group') {
    $access = node_access('create', 'cmtls_app');
  }
  elseif($parent->type == 'cmtls_app') {
    if($content_types = array_keys(cmtls_get_app_content_types($parent->cmtls_app_type))) {
      $access = node_access('create', array_pop($content_types)); // multiple types yet to resolve
    }
  }
  else {
    $access = node_access('create', $parent->type);
  }

  return $access;
}

/**
 * Implements hook_form_alter().
 *
 * preselects menu and app for CT content nodes
 * adds location autocomplete
 * inserts the app configuration fields
 * @see cmtls_form_config_save()
 *
 */
function cmtls_form_node_form_alter(&$form, &$form_state, $form_id) {
  global $user;

  $app_form_ids = array();
  foreach (cmtls_get_app_content_types() as $app_type => $app) {
    $app_form_ids[] = $app_type . '_node_form';
  }

  // preselect group audience
  if(($form_id == 'cmtls_app_node_form' || in_array($form_id, $app_form_ids)) && isset($_GET['gid'])) {
    $form['group_audience'][LANGUAGE_NONE]['#default_value'][(int)$_GET['gid']] = (int)$_GET['gid'];
  }

  // inserts the app configuration fields
  if(in_array($form_id, $app_form_ids) && isset($_GET['aid'])) {
    $form['field_cmtls_application'][LANGUAGE_NONE]['#default_value'][] = (int)$_GET['aid'];
  }

  // add location autocomplete
  if($form_id != 'cmtls_location_node_form' && in_array($form_id, $app_form_ids) && isset($_GET['aid'])) {
    drupal_add_js(drupal_get_path('module', 'cmtls') . '/js/cmtls.location_ac.js');
  }

  // add location title <=> name js
  if($form_id == 'cmtls_location_node_form') {
    drupal_add_js(drupal_get_path('module', 'cmtls') . '/js/cmtls.location_title.js');
  }

  // inserts the app configuration fields
  if($form_id == 'cmtls_app_node_form') {
    $current_config = array();

    if(!empty($form['#node']->field_cmtls_app_configs[LANGUAGE_NONE][0]['value'])) {
      $current_config = unserialize($form['#node']->field_cmtls_app_configs[LANGUAGE_NONE][0]['value']);
    }

    $configs = module_invoke_all('cmtls_app_config', $current_config);

    $form['cmtls_app_configs'] = array();

    if(!empty($configs)) {
      $form['cmtls_app_configs'] = $configs;
      $form['cmtls_app_configs']['#weight'] = $form['field_cmtls_app_type']['#weight'] + 1;
      $form['#submit'][] = 'cmtls_form_config_save';
    }

    // hide from users
    if($user->uid != 1) {
      $form['field_cmtls_app_configs']['#type'] = 'hidden';
    }
  }

  if($form_id == 'cmtls_group_node_form') {
    // add location autocomplete
    drupal_add_js(drupal_get_path('module', 'cmtls') . '/js/cmtls.location_ac.js');
    // removes the main group field from node form
    if($user->uid != 1) {
      $form['field_cmtls_main_group'] = NULL;
    }
  }

  unset($form['locations']);
}

/**
 * App node form submit, saves app instance configuration values
 */
function cmtls_form_config_save($form, &$form_state) {
  if(!empty($form['cmtls_app_configs'])) {
    // save app config
    $app_config = array();

    foreach ($form['cmtls_app_configs'] as $module => &$configs) if(strpos($module, '#') !== 0) {
      // for now only single level form values are counted
      foreach ($form['cmtls_app_configs'][$module] as $key => &$config) if(strpos($key, '#') !== 0) {
        $app_config[$module][$key] = $config['#value'];
      }
    }

    if(!empty($app_config)) {
      $form['field_cmtls_app_configs'][LANGUAGE_NONE][0]['value']['#value'] = $form_state['values']['field_cmtls_app_configs'][LANGUAGE_NONE][0]['value'] = serialize($app_config);
    }
  }
}

/**
 * Adds global values to Drupal $conf['cmtls']
 */
function cmtls_add_conf($key, &$value) {
  global $conf;

  if(!isset($conf['cmtls'])) $conf['cmtls'] = array();
  if(!isset($conf['cmtls'][$key])) $conf['cmtls'][$key] = NULL;
  $conf['cmtls'][$key] = $value;
}

/**
 * returns current app object
 */
function cmtls_get_current_app() {
  global $conf;
  if(isset($conf['cmtls']['current_app'])) return $conf['cmtls']['current_app'];
  else return NULL;
}

/**
 * returns the app custom configuration values
 */
function cmtls_get_app_config($app = NULL) {
  if(!$app) $app = cmtls_get_current_app();
  if(isset($app->field_cmtls_app_configs[LANGUAGE_NONE][0]['value'])) {
    return unserialize($app->field_cmtls_app_configs[LANGUAGE_NONE][0]['value']);
  }
  else {
    return array();
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * adds new user registrations to the main CT group
 * @see cmtls_user_register_add_to_main_group
 */
function cmtls_form_user_register_form_alter(&$form, &$form_state, $form_id) {
  $form['#submit'][] = 'cmtls_user_register_add_to_main_group';
}

/**
 * adds new user registrations to the main CT group
 */
function cmtls_user_register_add_to_main_group($form, &$form_state) {
  cmtls_add_user_to_main_group($form['#user']);
}

/**
 * Implements hook_cmtls_app_config
 *
 * adds location configuration options
 */
function cmtls_cmtls_app_config($config) {

  $defaults = array(
    'sorting_field' => 'node_title',
    'sorting_dir' => 'ASC'
  );

  $settings = array_merge($defaults, isset($config['cmtls_location']) ? $config['cmtls_location'] : array());

  $form['cmtls_location'] = array(
    '#type' => 'fieldset',
    '#title' => t('Sorting settings'),
    '#collapsible' => TRUE,
    '#states' => array(
      'visible' => array(
        ':input[name="field_cmtls_app_type['.LANGUAGE_NONE.'][0][cmtls_app_type]"]' => array('value' => 'cmtls_location'),
      ),
    ),
  );

  $form['cmtls_location']['sorting_field'] = array(
    '#type' => 'radios',
    '#title' => t('Sorting field'),
    '#default_value' => $settings['sorting_field'],
    '#options' => array(
      'node_created' => t('Created date'),
      'node_title' => t('Location title'),
    ),
  );

  $form['cmtls_location']['sorting_dir'] = array(
    '#type' => 'radios',
    '#title' => t('Sorting order'),
    '#default_value' => $settings['sorting_dir'],
    '#options' => array(
      'ASC' => t('Ascending'),
      'DESC' => t('Descending'),
    ),
  );

  return $form;
}

/**
 * Implements hook_cmtls_app
 *
 * adds location app type
 */
function cmtls_cmtls_app() {
  return array(
    'cmtls_location' => array(
      'title' => t('Locations'),
      'description' => t('Locations'),
      'node types' => array(
        'cmtls_location' => t('Location'),
      ),
    ),
  );
}

/**
 * implements hook_location_element_alter()
 *
 * adds location autocomplete to the location name field
 */
function cmtls_location_element_alter(&$element) {
  $element['name']['#attributes']['class'][] = 'cmtls-location-autocomplete';
  drupal_add_library('system', 'ui.autocomplete');
}

/**
 * Implements hook_context_plugins()
 */
function cmtls_context_plugins() {
  $plugins = array();
  $plugins['cmtls_context_condition_app_type'] = array(
    'handler' => array(
      'path' => drupal_get_path('module', 'cmtls') .'/plugins',
      'file' => 'cmtls_context_condition_app_type.inc',
      'class' => 'cmtls_context_condition_app_type',
      'parent' => 'context_condition_node',
    ),
  );
  return $plugins;
}

/**
 * Implements hook_context_registry()
 */
function cmtls_context_registry() {
  return array(
    'conditions' => array(
      'cmtls_app_type' => array(
        'title' => t('CT Application type'),
        'plugin' => 'cmtls_context_condition_app_type',
      ),
    ),
  );
}

/**
 * Implements hook_context_node_condition_alter()
 *
 * adds the 'cmtls_app_type' condition to nodes
 */
function cmtls_context_node_condition_alter(&$node, $op) {
  if ($plugin = context_get_plugin('condition', 'cmtls_app_type')) {
    $plugin->execute($node, $op);
  }
}

function cmtls_theme($existing, $type, $theme, $path) {
  return array(
    'cmtls_group_members_count' => array(
      'variables' => array(
        'count' => 0,
      ),
    ),
    'cmtls_group_subscription' => array(
      'variables' => array(
        'entity' => NULL,
      ),
    ),
    'cmtls_location' => array(
      'template' => 'cmtls-location',
      'variables' => array(
        'location' => NULL,
        'hide' => array(),
      ),
    ),
  );
}

/**
 * Theme a simple content array.
 *
 * This theme function uses the newer recommended format where a single
 * render array is provided to the theme function.
 */
function theme_cmtls_group_members_count($variables) {
  $output = t('!count members', array('!count' => $variables['count']));
  return $output;
}

function cmtls_group_ds_members_field(&$entity) {
  $groups = og_get_group_ids('node', array($entity->nid));
  $query = db_select('users', 'u');
  $query->innerJoin('og_membership', 'ogm', 'u.uid = ogm.etid');
  $query
    ->condition('ogm.gid', $groups, 'IN')
    ->condition('ogm.entity_type', 'user', '=');
  $query->addExpression('COUNT(u.uid)', 'count');

  $count = $query->execute()->fetchField();

  return theme('cmtls_group_members_count', array('count' => $count));
}

/**
 * c-p from: og_ui_subscribe_link()
 *
 * @see og_ui_subscribe_link()
 */
function theme_cmtls_group_subscription($variables) {
  $entity_type = 'node';
  $entity = $variables['entity'];

  $return = array();

  global $user;
  $account = clone($user);

  list($id) = entity_extract_ids($entity_type, $entity);

  if (($group = og_get_group($entity_type, $id))) {
    if (!empty($entity->uid) && ($entity->uid == $user->uid)) {
      // User is the group manager.
      $links['title'] = t('Leave');
      $links['href'] = "group/$entity_type/$id/unsubscribe";
      $links['options'] = array(
        'attributes' => array(
          'class' => array(
            'disabled',
          ),
        ),
      );
    }
    else {
      // Check if the user is a group member.
      if (og_is_member($group->gid, 'user', $account, array(OG_STATE_ACTIVE, OG_STATE_PENDING))) {
        if (og_user_access($group->gid, 'unsubscribe', $account)) {
          $links['title'] = t('Leave');
          $links['href'] = "group/$entity_type/$id/unsubscribe";
        }
      }
      else {
        if (og_is_member($group->gid, 'user', $account, array(OG_STATE_BLOCKED))) {
          // If user is blocked, they should not be able to apply for
          // membership.
          return;
        }

        if (og_user_access($group->gid, 'subscribe without approval', $account)) {
          $links['title'] = t('Join');
          $url = "group/$entity_type/$id/subscribe";
          if ($account->uid) {
            $links['href'] = $url;
          }
          else {
            $links['href'] = 'user/login';
            $links['options'] = array('query' => array('destination' => $url));
          }
        }
        elseif (og_user_access($group->gid, 'subscribe')) {
          $links['title'] = t('Join');
          $url = "group/$entity_type/$id/subscribe";
          if ($account->uid) {
            $links['href'] = $url;
          }
          else {
            $links['href'] = 'user/login';
            $links['options'] = array('query' => array('destination' => $url));
          }
        }
        else {
          $return = array(
            //'#type' => 'item',
            //'#markup' => t('This is a closed group. Only a group administrator can add you.'),
          );
        }

      }
    }
  }

  if (!empty($links['title'])) {
    $links += array('options' => array());
    $return = array(
      '#type' => 'link',
      '#title' => $links['title'],
      '#href' => $links['href'],
      '#options' => $links['options'],
    );
  }

  return render($return);
}

function cmtls_group_ds_subscription_field(&$entity) {
  return theme('cmtls_group_subscription', array('entity' => $entity));
}

/**
 * Define layouts from code.
 *
 * @return $layouts
 *   A collection of layouts.
 */
function cmtls_ds_layout_info() {
  $layouts = array(
    'cmtls_short_4region' => array(
      'label' => t('Left column, content, footer, right column'),
      'path' => drupal_get_path('module', 'cmtls') . '/layouts/cmtls_short_4region',
      'regions' => array(
        'left_column' => t('Left column'),
        'middle' => t('Content'),
        'footer' => t('Footer'),
        'right_column' => t('Right column'),
      ),
      //'css' => TRUE,
      // optional, form only applies to node form at this point.
      //'form' => TRUE,
    ),
  );

  return $layouts;
}

/**
 * Implements hook_views_data_alter()
 * to change node type filter
 */
function cmtls_views_data_alter(&$data) {
  $data['node']['type']['filter']['handler'] = 'views_handler_filter_cmtls_node_type';
}

/**
 * Theme preprocess function for a location.
 *
 * @see template_preprocess_location()
 */
function template_preprocess_cmtls_location(&$variables) {
  $location = $variables['location'];
  // This will get taken back out if map links are hidden.
  $location['map_link'] = TRUE;
  if (is_array($variables['hide'])) {
    foreach($variables['hide'] as $key) {
      unset($location[$key]);
      // Special case for coords.
      /*
      if ($key == 'coords') {
        unset($location['latitude']);
        unset($location['longitude']);
      }
       *
       */
    }
  }

  $fields = location_field_names(TRUE);
  if (is_array($fields)) {
    foreach ($fields as $key => $value) {
      $variables[$key] = '';
      // Arrays can't be converted, ignore them.
      if (!empty($location[$key]) && !is_array($location[$key])) {
        $variables[$key] = check_plain($location[$key]);
      }
    }
  }

  // Map link.
  $variables['map_link'] = '';
  if (!empty($location['map_link'])) {
    // Do not use $location for generating the map link, since it will
    // not contain the country if that field is hidden.
    $variables['map_link'] = location_map_link($variables['location']);
  }

  // Theme latitude and longitude as d/m/s.
  $variables['latitude'] = '';
  $variables['latitude_dms'] = '';
  if (!empty($location['latitude'])) {
    $variables['latitude'] = check_plain($location['latitude']);
    $variables['latitude_dms'] = theme('location_latitude_dms', array('latitude' => $location['latitude']));
  }

  $variables['longitude'] = '';
  $variables['longitude_dms'] = '';
  if (!empty($location['longitude'])) {
    $variables['longitude'] = check_plain($location['longitude']);
    $variables['longitude_dms'] = theme('location_longitude_dms', array('longitude' => $location['longitude']));
  }

  // Add a country-specific template suggestion.
  if (!empty($location['country']) && location_standardize_country_code($location['country'])) {
    // $location['country'] is normalized in the previous line.
    $variables['theme_hook_suggestions'][] = 'location__' . $location['country'];
  }

  // Display either the code or the full name for the province.
  if (!isset($location['province'])) {
    $location['province'] = '';
  }
  if (!isset($location['province_name'])) {
    $location['province_name'] = '';
  }
  $variables['province_print'] = variable_get('location_use_province_abbreviation', 1) ? $location['province'] : $location['province_name'];
}

/**
 * Implements hook_block_info().
 *
 * This hook declares what blocks are provided by the module.
 */
function cmtls_block_info() {
  // This hook returns an array, each component of which is an array of block
  // information. The array keys are the 'delta' values used in other block
  // hooks.

  // The required block information is a block description, which is shown
  // to the site administrator in the list of possible blocks. You can also
  // provide initial settings for block weight, status, etc.

  // Many options are defined in hook_block_info():
  $blocks['cmtls_edit_buttons'] = array(
    // info: The name of the block.
    'info' => t('CT: buttons'),
  );

  // Many options are defined in hook_block_info():
  $blocks['cmtls_site_title'] = array(
    // info: The name of the block.
    'info' => t('CT: site title'),
  );

  $blocks['cmtls_powered_by'] = array(
    // info: The name of the block.
    'info' => t('CT: powered by'),
  );

  $blocks['cmtls_slogan'] = array(
    // info: The name of the block.
    'info' => t('CT: site slogan'),
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 *
 * This hook generates the contents of the blocks themselves.
 */
function cmtls_block_view($delta = '') {
  //The $delta parameter tells us which block is being requested.
  $block = NULL;
  switch ($delta) {
    case 'cmtls_powered_by':
        $block['subject'] = NULL;
        $block['content'] = '<span>' . t('Powered by <a href="@poweredby">Community Tools</a>', array('@poweredby' => 'http://communitytools.info')) . '</span>';
      break;
    case 'cmtls_site_title':
        $node = menu_get_object();
        $content = NULL;
        if(isset($node->type)) {
          if($node->type == 'cmtls_group') {
            if($node->field_cmtls_main_group[LANGUAGE_NONE][0]['value']) {
              $content = l(variable_get('site_name'), drupal_lookup_path('alias', 'node/' . $node->nid));
            }
            else {
              $content = l($node->title, drupal_lookup_path('alias', 'node/' . $node->nid));
            }
          }
          else {
            $groups = og_get_entity_groups('node', $node);
            $gid = array_shift($groups);
            if($group = og_get_group('group', $gid)) {
              $node = node_load($group->etid);
              if($node) {
                if($node->field_cmtls_main_group[LANGUAGE_NONE][0]['value']) {
                  $content = l(variable_get('site_name'), drupal_lookup_path('alias', 'node/' . $node->nid));
                }
                else {
                  $content = l($node->title, drupal_lookup_path('alias', 'node/' . $node->nid));
                }
              }
            }
          }
        }
        $block['subject'] = NULL;
        $block['content'] = '<h2>' . ($content ? $content : l(variable_get('site_name'), '<front>')) . '</h2>';
      break;
    case 'cmtls_site_slogan':
        $node = menu_get_object();
        $content = NULL;
        if(isset($node->type)) {
          if($node->type == 'cmtls_group') {
            if($node->field_cmtls_main_group[LANGUAGE_NONE][0]['value']) {
              $content = variable_get('site_slogan');
            }
            else {
              $content = variable_get('site_name');
            }
          }
          else {
            $groups = og_get_entity_groups('node', $node);
            $gid = array_shift($groups);
            if($group = og_get_group('group', $gid)) {
              $node = node_load($group->etid);
              if($node) {
                if($node->field_cmtls_main_group[LANGUAGE_NONE][0]['value']) {
                  $content = variable_get('site_slogan');
                }
                else {
                  $content = variable_get('site_name');
                }
              }
            }
          }
        }
        $block['subject'] = NULL;
        $block['content'] = '<h6>' . ($content ? $content : variable_get('site_slogan')) . '</h6>';
      break;
    case 'cmtls_edit_buttons':
      global $user;

      $links = array();

      $entity = menu_get_object();

      if(!isset($entity)) {
        // groups global pages
        if(($_GET['q'] == 'cmtls/groups' || $_GET['q'] == 'cmtls/my-groups') && node_access('create', 'cmtls_group')) {
          $links[] = '<li>'. l(t('Add group'), 'node/add/cmtls-group') . '</li>';
        }
        // users
        if(arg(0) == 'user' && arg(1) && !arg(2) && $user->uid == arg(1) && user_edit_access($user)) {
          $links[] = '<li>'. l(t('Edit'), 'user/' . (int)arg(1) . '/edit') . '</li>';
        }
      }

      // edit
      if(isset($entity->type) && !arg(2) && node_access('update', $entity)) {
        $links[] = '<li>'. l(t('Edit'), 'node/' . (int)arg(1) . '/edit') . '</li>';
      }

      // assuming this is node
      if(isset($entity->type) && !arg(2)) {
        $goto_options = array();
        $node = $entity;
        // get parent menu by path node/$node->nid
        $query = db_select('menu_links', 'menu_links')
          ->fields('menu_links', array('mlid'))
          ->condition('menu_links.link_path', 'node/' . $node->nid, '=');
        if($mlid = $query->execute()->fetchField()) {
          $goto_options['query']['mlid'] = $mlid;
        }

        // group advanced && app reorder
        if($node->type == 'cmtls_group') {
          $groups = og_get_group_ids('node', array($node->nid));
          $goto_options['query']['gid'] = $groups[$node->nid];
          if(og_user_access($groups[$node->nid], 'update own cmtls_app content')) {
      	    $goto_options['query']['gid'] = $groups[$node->nid];
      	    if(og_user_access($groups[$node->nid], 'administer group')) {
      	      $links[] = '<li>'.l(t('Group settings'), 'node/' . (int)arg(1) . '/group', $goto_options) . '</li>';
      	      $links[] = '<li>'.l(t('Apps settings'), 'cmtls/apps/'.$groups[$node->nid], $goto_options) . '</li>';
      	    }
          }
        }
        // group preselect for apps
        if($node->type == 'cmtls_group' && node_access('create', 'cmtls_app')) {
          $groups = og_get_group_ids('node', array($node->nid));
          $goto_options['query']['gid'] = $groups[$node->nid];
          if(og_user_access($groups[$node->nid], 'update own cmtls_app content')) {
            $links[] = '<li>'.l(t('Add application'), 'node/add/cmtls-app', $goto_options) . '</li>';
          }
        }
        // group and app preselect for content nodes
        elseif($node->type == 'cmtls_app') {
          $types = array_keys(cmtls_get_app_content_types($node->cmtls_app_type));
          $type = array_pop($types);  // multiple types yet to resolve
          if(node_access('create', $type)) {
            $groups = og_get_entity_groups('node', $node);
            $goto_options['query']['gid'] = array_shift($groups);
            $goto_options['query']['aid'] = $node->nid;
            if(og_user_access($goto_options['query']['gid'], 'update own ' . $type . ' content')) {
              $links[] = '<li>'.l(t('Add'), 'node/add/' . str_replace('_', '-', $type), $goto_options) . '</li>';
            }
          }
        }
        // group and app preselect for content nodes
        elseif(in_array($node->type, array_keys(cmtls_get_app_content_types())) && node_access('create', $node->type)) {
          $groups = og_get_entity_groups('node', $node);
          $goto_options['query']['gid'] = array_shift($groups);
          $goto_options['query']['aid'] = $node->field_cmtls_application[LANGUAGE_NONE][0]['nid'];
          if(og_user_access($goto_options['query']['gid'], 'update own ' . $node->type . ' content')) {
            $links[] = '<li>'.l(t('Add'), 'node/add/' . str_replace('_', '-', $node->type), $goto_options) . '</li>';
          }
        }
      }

      if(sizeof($links)) {
        $block['subject'] = NULL;
        $block['content'] = '<ul class="cmtls-tabs">' . implode($links, '') . '</ul>';
      }
      break;
  }
  return $block;
}

/**
 * Implements hook_fb_user().
 *
 * fb_user.module will call this before and after creating a local Drupal account.
 *
 * @param $data
 * fb_user.module will fill this with information pulled from the facebook API.
 * If you need additional information, call fb_api() to get it.
 */
function cmtls_fb_user($op, $data, &$return) {
  // add the first and lastname to cmtls name fields
  if ($op == FB_USER_OP_PRE_USER) {
    $return['field_cmtls_firstname'] = array(
      'und' => array(
        0 => array(
          'value' => $data['info']['first_name'],
        ),
      ),
    );
    $return['field_cmtls_lastname'] = array(
      'und' => array(
        0 => array(
          'value' => $data['info']['last_name'],
        ),
      ),
    );
  }

  // add the user to main group
  if ($op == FB_USER_OP_POST_USER) {
    cmtls_add_user_to_main_group($data['account']);
  }
}

/**
 * helper function adds user to the CT main group
 */
function cmtls_add_user_to_main_group($account = NULL) {
  if(!$account) {
    global $user;
    $account = $user;
  }

  $gid = cmtls_get_main_group_gid();
  if($gid) {
    $values = array(
      'entity' => $account,
    );
    og_group($gid, $values);
  }
}

function cmtls_get_main_group_gid() {
  $query = db_select('field_data_field_cmtls_main_group', 'field_data_field_cmtls_main_group')
    ->fields('og', array('gid'))
    ->condition('field_data_field_cmtls_main_group.field_cmtls_main_group_value', 1, '=')
    ->range(0, 1);
  $query->join('og', 'og', 'field_data_field_cmtls_main_group.entity_id = og.etid');
  $group = $query->execute()->fetchAssoc();
  return $group['gid'];
}

function cmtls_get_main_group_node() {
  $query = db_select('field_data_field_cmtls_main_group', 'field_data_field_cmtls_main_group')
    ->fields('field_data_field_cmtls_main_group', array('entity_id'))
    ->condition('field_data_field_cmtls_main_group.field_cmtls_main_group_value', 1, '=')
    ->range(0, 1);
  $group = $query->execute()->fetchAssoc();
  return node_load($group['entity_id']);
}

function cmtls_create_main_group() {
  if(!cmtls_get_main_group_gid()) {
    $node = new stdClass();
    $node->type = 'cmtls_group';
    node_object_prepare($node);

    $node->title = t('Main group');
    $node->uid = 1;
    $node->language = LANGUAGE_NONE;
    $node->body[$node->language][0]['value'] = t('This is the main group');
    $node->field_cmtls_main_group[$node->language][0]['value'] = 1;
    $node->group_group[$node->language][0]['value'] = 1;
    $node->group_access[$node->language][0]['value'] = 0;
    $node->og_roles_permissions [$node->language][0]['value'] = 1;

    // add group image
    $filepath = drupal_realpath(drupal_get_path('theme', 'cmtls_base') . '/img/section-header-default.jpg');
    // Create managed File object and associate with Image field.
    $file = (object) array(
      'uid' => 1,
      'display' => 1,
      'uri' => $filepath,
      'filemime' => file_get_mimetype($filepath),
      'status' => 1,
    );

    // save the file to the root of the files directory.
    $file = file_copy($file, 'public://');

    $node->field_cmtls_group_avatar[LANGUAGE_NONE][0] = (array)$file;

    node_save($node);

    $gid = og_get_group_ids('node', array($node->nid));
    $gid = array_shift($gid);

    $roles = og_roles($gid);

    foreach($roles as $rid => $role) {
      if($role == 'non-member') {
        // non-member
        cmtls_og_role_grant_permissions($rid, array(
          'subscribe' => 'og_ui',
          'subscribe without approval' => 'og_ui',
        ));
      }
      if($role == 'member') {
        // member
        cmtls_og_role_grant_permissions($rid, array(
          'delete own cmtls_app content' => 'og',
          'delete own cmtls_event content' => 'og',
          'delete own cmtls_location content' => 'og',
          'delete own cmtls_post content' => 'og',
          'delete own media_gallery content' => 'og',
          'update own cmtls_event content' => 'og',
          'update own cmtls_location content' => 'og',
          'update own cmtls_post content' => 'og',
          'update own media_gallery content' => 'og',
        ));
      }
      if($role == 'administrator member') {
        // admin
        cmtls_og_role_grant_permissions($rid, array(
          'add user' => 'og_ui',
          'approve and deny subscription' => 'og_ui',
          'administer group' => 'og',
          'delete any cmtls_app content' => 'og',
          'delete any cmtls_event content' => 'og',
          'delete any cmtls_location content' => 'og',
          'delete any cmtls_post content' => 'og',
          'delete any media_gallery content' => 'og',
          'delete own cmtls_app content' => 'og',
          'delete own cmtls_event content' => 'og',
          'delete own cmtls_location content' => 'og',
          'delete own cmtls_post content' => 'og',
          'delete own media_gallery content' => 'og',
          'update any cmtls_app content' => 'og',
          'update any cmtls_event content' => 'og',
          'update any cmtls_location content' => 'og',
          'update any cmtls_post content' => 'og',
          'update any media_gallery content' => 'og',
          'update group' => 'og',
          'update own cmtls_app content' => 'og',
          'update own cmtls_event content' => 'og',
          'update own cmtls_location content' => 'og',
          'update own cmtls_post content' => 'og',
          'update own media_gallery content' => 'og',
        ));
      }
    }

    return $node;
  }
}

function cmtls_og_role_grant_permissions($rid, $permissions = array()) {
  db_delete('og_role_permission')
    ->condition('rid', $rid, '=')
    ->execute();

  foreach($permissions as $name => $module) {
    db_merge('og_role_permission')
      ->key(array(
        'rid' => $rid,
        'permission' => $name,
        'module' => $module,
      ))
      ->execute();
  }
}
